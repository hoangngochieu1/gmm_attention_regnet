{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":15122,"sourceType":"datasetVersion","datasetId":10832},{"sourceId":12556697,"sourceType":"datasetVersion","datasetId":7928729}],"dockerImageVersionId":31090,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/hongngchiu/regnetv2?scriptVersionId=252127165\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ndevice","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# 1 RegNetWithAttentionAndSoftmax","metadata":{}},{"cell_type":"code","source":"import torch\nimport torch.nn as nn\nimport torch.nn.functional as F\n\nclass SelfAttentionGate(nn.Module):\n    def __init__(self, in_channels, inter_channels=None, upsample_mode='bilinear'):\n        super(SelfAttentionGate, self).__init__()\n        if inter_channels is None:\n            inter_channels = in_channels // 2\n            inter_channels = max(1, inter_channels)\n\n        self.theta = nn.Conv2d(in_channels, inter_channels, kernel_size=1)\n        self.psi = nn.Conv2d(inter_channels, 1, kernel_size=1)\n        self.W = nn.Conv2d(in_channels, in_channels, kernel_size=1)\n        self.upsample_mode = upsample_mode\n        self.sigmoid = nn.Sigmoid()\n        self.relu = nn.ReLU(inplace=True)\n\n    def forward(self, x):\n        input_size = x.size()  # [B, C, H, W]\n        theta_x = self.theta(x)            # [B, I_C, H, W]\n        f = self.relu(theta_x)             # Không cộng g\n        psi_f = self.sigmoid(self.psi(f))\n\n        if psi_f.shape[2:] != input_size[2:]:\n            psi_f = F.interpolate(psi_f, size=input_size[2:], mode=self.upsample_mode, align_corners=False)\n\n        attention = psi_f.expand_as(x)     # [B, C, H, W]\n        y = x * attention                  # Apply mask\n        W_y = self.W(y)                    # Projection\n        \n        return W_y\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-07-23T19:12:28.915361Z","iopub.execute_input":"2025-07-23T19:12:28.915658Z","iopub.status.idle":"2025-07-23T19:12:33.058775Z","shell.execute_reply.started":"2025-07-23T19:12:28.915632Z","shell.execute_reply":"2025-07-23T19:12:33.058017Z"}},"outputs":[],"execution_count":1},{"cell_type":"code","source":"import torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport torchvision.models as models\nimport random\n\n\nclass RegNetWithAttentionAndSoftmax(nn.Module):\n    def __init__(self, num_components=3):\n        super(RegNetWithAttentionAndSoftmax, self).__init__()\n        self.num_components = num_components\n\n        # Backbone\n        base_model = models.regnet_y_400mf(pretrained=True)\n        self.backbone = nn.Sequential(*list(base_model.children())[:-2])  # Remove classifier head\n        backbone_out_channels = 440  # RegNet_Y_400MF output channels\n\n        # Attention gates\n        self.attention_blocks = nn.ModuleList([\n            SelfAttentionGate(backbone_out_channels) for _ in range(num_components)\n        ])\n\n        # Regression branches: mỗi nhánh sinh [mu, sigma_raw]\n        # self.reg_branches = nn.ModuleList([\n        #     nn.Sequential(\n        #         nn.Linear(backbone_out_channels, 64),\n        #         nn.ReLU(),\n        #         nn.Linear(64, 2)  # Output mu, sigma_raw\n        #     ) for _ in range(num_components)\n        # ])\n\n        # Sinh các seed ngẫu nhiên duy nhất trong không gian int32\n        unique_seeds = random.sample(range(0, 2**31 - 1), num_components)\n        \n        self.reg_branches = nn.ModuleList()\n        for i in range(num_components):\n            torch.manual_seed(unique_seeds[i])\n            branch = nn.Sequential(\n                nn.Linear(backbone_out_channels, 64),\n                nn.ReLU(),\n                nn.Linear(64, 2)\n            )\n            self.reg_branches.append(branch)\n\n        # Mixing coefficient (pi): từ đặc trưng trung bình\n        self.softmax_branch = nn.Sequential(\n            nn.Linear(backbone_out_channels, 64),\n            nn.ReLU(),\n            nn.Linear(64, num_components)\n        )\n\n        self.gap = nn.AdaptiveAvgPool2d(1)  # Global Average Pooling\n\n    def forward(self, x):\n        feat_map = self.backbone(x)  # [B, C, H, W]\n\n        # Attention + pooling\n        attention_feats = [att(feat_map) for att in self.attention_blocks]  # K nhánh, mỗi cái [B, C, H, W]\n        pooled_feats = [self.gap(f).squeeze(-1).squeeze(-1) for f in attention_feats]  # [B, C] * K\n\n        # Regression outputs\n        reg_outputs = [reg(f) for reg, f in zip(self.reg_branches, pooled_feats)]  # [B, 2] * K\n        reg_outputs = torch.stack(reg_outputs, dim=1)  # [B, K, 2]\n        mu = reg_outputs[:, :, 0]                     # [B, K]\n        sigma = F.softplus(reg_outputs[:, :, 1]) + 1e-6  # [B, K], đảm bảo dương\n\n        # Mixing coefficients (pi)\n        avg_feat = torch.stack(pooled_feats, dim=0).mean(dim=0)  # [B, C]\n        logits = self.softmax_branch(avg_feat)  # [B, K]\n        pi = F.softmax(logits, dim=1)           # [B, K]\n\n        # Trả thêm attention maps: [B, K, C, H, W]\n        attention_maps = torch.stack(attention_feats, dim=1)  # [B, K, C, H, W]\n\n        return pi, mu, sigma, attention_maps\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-23T19:12:33.059486Z","iopub.execute_input":"2025-07-23T19:12:33.059729Z","iopub.status.idle":"2025-07-23T19:12:36.604486Z","shell.execute_reply.started":"2025-07-23T19:12:33.059714Z","shell.execute_reply":"2025-07-23T19:12:36.60373Z"}},"outputs":[],"execution_count":2},{"cell_type":"markdown","source":"# Tổng loss = mdn_loss + lambda * diversity_loss","metadata":{}},{"cell_type":"code","source":"def mdn_loss(y, pi, mu, sigma):\n    \"\"\"\n    y: [B] - ground truth\n    pi: [B, K]\n    mu: [B, K]\n    sigma: [B, K]\n\n    Return: scalar loss (mean NLL)\n    \"\"\"\n    y = y.unsqueeze(1)  # [B, 1]\n    sqrt_2pi = torch.sqrt(torch.tensor(2.0 * torch.pi, device=y.device, dtype=y.dtype))\n\n    # Gaussian PDF: [B, K]\n    prob = (1.0 / (sigma * sqrt_2pi)) * \\\n           torch.exp(-0.5 * ((y - mu) / sigma) ** 2)\n\n    weighted_prob = pi * prob  # [B, K]\n    total_prob = torch.sum(weighted_prob, dim=1)  # [B]\n\n    nll = -torch.log(total_prob + 1e-8)\n    return nll.mean()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-23T19:12:36.605962Z","iopub.execute_input":"2025-07-23T19:12:36.606241Z","iopub.status.idle":"2025-07-23T19:12:36.611192Z","shell.execute_reply.started":"2025-07-23T19:12:36.606224Z","shell.execute_reply":"2025-07-23T19:12:36.610707Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"def diversity_loss(attention_maps):\n    \"\"\"\n    attention_maps: [B, K, C, H, W]\n    Trả về độ tương đồng giữa các attention maps (để giảm)\n    \"\"\"\n    B, K, C, H, W = attention_maps.shape\n\n    # Mean across channel → [B, K, H, W]\n    spatial_maps = attention_maps.mean(dim=2)\n\n    # Flatten to [B, K, H*W]\n    flat_maps = spatial_maps.view(B, K, -1)\n\n    # Normalize theo spatial vector (optional: để giống cosine)\n    flat_maps = F.normalize(flat_maps, dim=2)\n\n    # Dot product similarity: [B, K, K]\n    sim_matrix = torch.bmm(flat_maps, flat_maps.transpose(1, 2))\n\n    # Loại bỏ diagonal (i==j)\n    eye = torch.eye(K, device=attention_maps.device).unsqueeze(0)  # [1, K, K]\n    sim_matrix = sim_matrix * (1 - eye)\n\n    # Trung bình loss trên batch\n    return sim_matrix.sum() / B\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-23T19:12:36.611942Z","iopub.execute_input":"2025-07-23T19:12:36.612352Z","iopub.status.idle":"2025-07-23T19:12:36.629908Z","shell.execute_reply.started":"2025-07-23T19:12:36.612327Z","shell.execute_reply":"2025-07-23T19:12:36.629309Z"}},"outputs":[],"execution_count":4},{"cell_type":"code","source":"def total_loss(y, pi, mu, sigma, attention_maps, lambda_div=0.1):\n    \"\"\"\n    Tổng loss = mdn_loss + lambda * diversity_loss\n    \"\"\"\n    main = mdn_loss(y, pi, mu, sigma)\n    div = diversity_loss(attention_maps)\n    return main + lambda_div * div\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-23T19:12:36.630621Z","iopub.execute_input":"2025-07-23T19:12:36.630893Z","iopub.status.idle":"2025-07-23T19:12:36.643659Z","shell.execute_reply.started":"2025-07-23T19:12:36.630878Z","shell.execute_reply":"2025-07-23T19:12:36.64314Z"}},"outputs":[],"execution_count":5},{"cell_type":"code","source":"# Dummy input\nB, C, H, W = 2, 3, 224, 224\nx = torch.randn(B, C, H, W)\ny = torch.tensor([10.0, 12.0])  # tuổi ground truth\n\n# Model\nmodel = RegNetWithAttentionAndSoftmax(num_components=3)\n\n# Forward\npi, mu, sigma, attention_maps = model(x)\n\n# Print shapes để kiểm tra\nprint(\"pi:\", pi)                  # [B, K]\nprint(\"mu:\", mu)                  # [B, K]\nprint(\"sigma:\", sigma)            # [B, K]\nprint(\"attention_maps:\", attention_maps.shape)  # [B, K, C, H', W']\n\n# Compute loss\nloss = total_loss(y, pi, mu, sigma, attention_maps, lambda_div=0.1)\nprint(\"Total loss:\", loss.item())\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-23T19:12:36.644253Z","iopub.execute_input":"2025-07-23T19:12:36.644473Z","iopub.status.idle":"2025-07-23T19:12:37.49243Z","shell.execute_reply.started":"2025-07-23T19:12:36.644459Z","shell.execute_reply":"2025-07-23T19:12:37.491662Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=RegNet_Y_400MF_Weights.IMAGENET1K_V1`. You can also use `weights=RegNet_Y_400MF_Weights.DEFAULT` to get the most up-to-date weights.\n  warnings.warn(msg)\nDownloading: \"https://download.pytorch.org/models/regnet_y_400mf-c65dace8.pth\" to /root/.cache/torch/hub/checkpoints/regnet_y_400mf-c65dace8.pth\n100%|██████████| 16.8M/16.8M [00:00<00:00, 88.9MB/s]\n","output_type":"stream"},{"name":"stdout","text":"pi: tensor([[0.2926, 0.3730, 0.3344],\n        [0.2999, 0.3773, 0.3228]], grad_fn=<SoftmaxBackward0>)\nmu: tensor([[-0.2251,  0.1609, -0.1015],\n        [-0.2337,  0.1416, -0.0483]], grad_fn=<SelectBackward0>)\nsigma: tensor([[0.7538, 0.6734, 0.7678],\n        [0.7870, 0.6793, 0.7979]], grad_fn=<AddBackward0>)\nattention_maps: torch.Size([2, 3, 440, 7, 7])\nTotal loss: 18.592721939086914\n","output_type":"stream"}],"execution_count":6},{"cell_type":"code","source":"# dataset.py\n\nimport os\nimport pandas as pd\nfrom PIL import Image\nfrom torch.utils.data import Dataset\nimport torchvision.transforms as transforms\nimport torch\n\nclass AgeGenderDataset(Dataset):\n    def __init__(self, image_dir, csv_path, use_age=True, transform=None, image_ext=\".png\"):\n        \"\"\"\n        image_dir: thư mục ảnh (train_images/ hoặc test_images/)\n        csv_path: đường dẫn đến train.csv hoặc test.csv\n        use_age: True → dùng age làm label (train), False → dùng dummy label (test)\n        image_ext: đuôi ảnh, ví dụ '.jpg' hoặc '.png'\n        \"\"\"\n        self.image_dir = image_dir\n        self.data = pd.read_csv(csv_path)\n        self.use_age = use_age\n        self.transform = transform\n        self.image_ext = image_ext\n\n    def __len__(self):\n        return len(self.data)\n\n    def __getitem__(self, idx):\n        row = self.data.iloc[idx]\n        img_id = str(row['id']).zfill(3)  # đảm bảo '001' thay vì '1'\n        img_path = os.path.join(self.image_dir, img_id + self.image_ext)\n\n        image = Image.open(img_path).convert(\"RGB\")\n        if self.transform:\n            image = self.transform(image)\n\n        if self.use_age:\n            label = float(row['boneage'])  # regression label\n            return image, torch.tensor(label, dtype=torch.float32)\n        else:\n            # dummy label để test pipeline\n            return image, torch.tensor(-1.0)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-23T19:12:37.493196Z","iopub.execute_input":"2025-07-23T19:12:37.493459Z","iopub.status.idle":"2025-07-23T19:12:37.890511Z","shell.execute_reply.started":"2025-07-23T19:12:37.493442Z","shell.execute_reply":"2025-07-23T19:12:37.889905Z"}},"outputs":[],"execution_count":7},{"cell_type":"code","source":"# train.py\n\nimport torch\nfrom torch.utils.data import DataLoader\n# from model import RegNetWithAttentionAndSoftmax, total_loss\n# from dataset import AgeGenderDataset\nimport torchvision.transforms as transforms\n\ndef train():\n    train_dir = \"/kaggle/input/rsna-bone-age/boneage-training-dataset/boneage-training-dataset\"\n    train_csv = \"/kaggle/input/rsna-bone-age/boneage-training-dataset.csv\"\n\n    transform = transforms.Compose([\n        transforms.Resize((512, 512)),\n        transforms.ToTensor(),\n    ])\n\n    dataset = AgeGenderDataset(train_dir, train_csv, use_age=True, transform=transform)\n    dataloader = DataLoader(dataset, batch_size=16, shuffle=True)\n\n    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n    model = RegNetWithAttentionAndSoftmax(num_components=3).to(device)\n    optimizer = torch.optim.Adam(model.parameters(), lr=1e-4)\n\n    model.train()\n    for epoch in range(5):\n        total_loss_value = 0\n        for imgs, targets in dataloader:\n            imgs = imgs.to(device)\n            targets = targets.to(device)\n\n            pi, mu, sigma, attn_maps = model(imgs)\n            loss = total_loss(targets, pi, mu, sigma, attn_maps)\n\n            optimizer.zero_grad()\n            loss.backward()\n            optimizer.step()\n\n            total_loss_value += loss.item()\n\n        print(f\"[Epoch {epoch+1}] Loss: {total_loss_value/len(dataloader):.4f}\")\n\n    torch.save(model.state_dict(), \"model.pth\")\n\nif __name__ == \"__main__\":\n    train()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-23T19:12:37.891313Z","iopub.execute_input":"2025-07-23T19:12:37.891716Z","iopub.status.idle":"2025-07-23T20:22:59.648198Z","shell.execute_reply.started":"2025-07-23T19:12:37.891691Z","shell.execute_reply":"2025-07-23T20:22:59.647541Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=RegNet_Y_400MF_Weights.IMAGENET1K_V1`. You can also use `weights=RegNet_Y_400MF_Weights.DEFAULT` to get the most up-to-date weights.\n  warnings.warn(msg)\n","output_type":"stream"},{"name":"stdout","text":"[Epoch 1] Loss: 9.5120\n[Epoch 2] Loss: 3.9169\n[Epoch 3] Loss: 3.7180\n[Epoch 4] Loss: 3.5597\n[Epoch 5] Loss: 3.4250\n","output_type":"stream"}],"execution_count":8},{"cell_type":"code","source":"def train_step(model: torch.nn.Module, \n               dataloader: torch.utils.data.DataLoader, \n               loss_fn: torch.nn.Module, \n               optimizer: torch.optim.Optimizer,\n               device: torch.device,\n               lam=None,) -> Tuple[float, float]:\n    \n    # Put model in train mode\n    model.train()\n\n    # Setup train loss and train accuracy values\n    train_loss, train_acc = 0, 0\n\n    # Loop through data loader data batches\n    for batch, (X, y) in enumerate(dataloader):\n        # Send data to target device\n        X, y = X.to(device), y.to(device)\n\n        # 1. Forward pass\n        y_pred = model(X)\n\n        # 2. Calculate  and accumulate loss\n        loss = loss_fn(y_pred, y)\n        train_loss += loss.item() \n\n        # 3. Optimizer zero grad\n        optimizer.zero_grad()\n\n        # 4. Loss backward\n        loss.backward()\n\n        # 5. Optimizer step\n        optimizer.step()\n\n        # Calculate and accumulate accuracy metric across all batches\n        y_pred_class = torch.argmax(torch.softmax(y_pred, dim=1), dim=1)\n        train_acc += (y_pred_class == y).sum().item()/len(y_pred)\n\n    # Adjust metrics to get average loss and accuracy per batch \n    train_loss = train_loss / len(dataloader)\n    train_acc = train_acc / len(dataloader)\n    return train_loss, train_acc\n\ndef valid_step(model: torch.nn.Module, \n              dataloader: torch.utils.data.DataLoader, \n              loss_fn: torch.nn.Module,\n              device: torch.device) -> Tuple[float, float]:\n\n    # Put model in eval mode\n    model.eval() \n\n    # Setup test loss and test accuracy values\n    valid_loss, valid_acc = 0, 0\n\n    # Turn on inference context manager\n    with torch.inference_mode():\n        # Loop through DataLoader batches\n        for batch, (X, y) in enumerate(dataloader):\n            # Send data to target device\n            X, y = X.to(device), y.to(device)\n\n            # 1. Forward pass\n            test_pred_logits = model(X)\n\n            # 2. Calculate and accumulate loss\n            loss = loss_fn(test_pred_logits, y)\n            valid_loss += loss.item()\n\n            # Calculate and accumulate accuracy\n            test_pred_labels = test_pred_logits.argmax(dim=1)\n            valid_acc += ((test_pred_labels == y).sum().item()/len(test_pred_labels))\n\n    # Adjust metrics to get average loss and accuracy per batch \n    valid_loss = valid_loss / len(dataloader)\n    valid_acc = valid_acc / len(dataloader)\n    return valid_loss, valid_acc\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-23T20:22:59.649977Z","iopub.execute_input":"2025-07-23T20:22:59.650405Z","iopub.status.idle":"2025-07-23T20:22:59.819627Z","shell.execute_reply.started":"2025-07-23T20:22:59.650386Z","shell.execute_reply":"2025-07-23T20:22:59.818587Z"}},"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_36/1382302554.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mRegNetWithAttentionAndSoftmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnum_components\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0moptimizer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptim\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mAdam\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparameters\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlr\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1e-4\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mdataset\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mDummyDataset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0mdataloader\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mDataLoader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbatch_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m16\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mshuffle\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'DummyDataset' is not defined"],"ename":"NameError","evalue":"name 'DummyDataset' is not defined","output_type":"error"}],"execution_count":9},{"cell_type":"code","source":"def train(model: torch.nn.Module, \n          train_dataloader: torch.utils.data.DataLoader, \n          # mixup_alpha : float,\n          valid_dataloader: torch.utils.data.DataLoader, \n          optimizer: torch.optim.Optimizer,\n          loss_fn: torch.nn.Module,\n          epochs: int,\n          model_name : str,\n          device: torch.device) -> Dict[str, List]:\n    \n    # Create empty results dictionary\n    results = {\"train_loss\": [],\n               \"train_acc\": [],\n               \"valid_loss\": [],\n               \"valid_acc\": [],\n               \"learning_rates\": []\n    }\n    \n    # scheduler = torch.optim.lr_scheduler.StepLR(\n    #     optimizer,\n    #     step_size=20,        # Giảm learning rate sau mỗi 10 epoch\n    #     gamma=0.1,           # Hệ số giảm learning rate (0.1 = giảm 90%)\n    #     verbose=True         # In thông báo khi learning rate thay đổi\n    # )\n    \n    # Make sure model on target device\n    model.to(device)\n    # Loop through training and testing steps for a number of epochs\n    for epoch in tqdm(range(epochs)):\n        train_loss, train_acc = train_step(model=model,\n                                          dataloader=train_dataloader,\n                                          # mixup_alpha=mixup_alpha,\n                                          loss_fn=loss_fn,\n                                          optimizer=optimizer,\n                                          device=device)\n        valid_loss, valid_acc = valid_step(model=model,\n                                          dataloader=valid_dataloader,\n                                          loss_fn=loss_fn,\n                                          device=device)\n        \n        # Cập nhật learning rate - StepLR không cần valid_loss\n        # scheduler.step()\n        \n        # Lưu current learning rate\n        current_lr = optimizer.param_groups[0]['lr']\n        results[\"learning_rates\"].append(current_lr)\n        \n        # Print out what's happening\n        print(\n          f\"Epoch: {epoch+1} | \"\n          f\"train_loss: {train_loss:.4f} | \"\n          f\"train_acc: {train_acc:.4f} | \"\n          f\"valid_loss: {valid_loss:.4f} | \"\n          f\"valid_acc: {valid_acc:.4f} | \"\n          f\"lr: {current_lr:.6f}\"  # Thêm learning rate vào print\n        )\n        # Update results dictionary\n        results[\"train_loss\"].append(train_loss)\n        results[\"train_acc\"].append(train_acc)\n        results[\"valid_loss\"].append(valid_loss)\n        results[\"valid_acc\"].append(valid_acc)\n    \n    #Specify storage model\n    save_path = \"/kaggle/working/\"\n    save_model(model=model_ft,\n           target_dir= save_path ,\n           model_name=model_name)\n    \n    # Return the filled results at the end of the epochs\n    return results,model","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"model_ft = nn.DataParallel(model_ft)\nmodel_ft = train(model = model_ft,\n                 train_dataloader= train_dataloader,\n                 valid_dataloader=valid_dataloader,\n                 loss_fn=loss_fn, \n                 optimizer=optimizer, \n                 epochs=50,\n                 model_name=\"custom_model_v1.pth\",\n                 device=device)","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}